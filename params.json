{"name":"AngularJS Style Guide","tagline":"AngularJS Style Guide: A starting point for AngularJS development teams to provide consistency through good practices.","body":"# AngularJS Style Guide\r\n\r\n*Opinionated AngularJS style guide for teams by [@john_papa](//twitter.com/john_papa)*\r\n\r\nIf you are looking for an opinionated style guide for syntax, conventions, and structuring AngularJS applications, then step right in. The styles contained here are based on on my experience with [AngularJS](//angularjs.org), presentations, [Pluralsight training courses] (http://pluralsight.com/training/Authors/Details/john-papa) and working in teams. \r\n\r\nThe purpose of this style guide is to provide guidance on building AngularJS applications by showing the conventions I use and, more importantly, why I choose them. \r\n\r\n## Community Awesomeness and Credit\r\nNever work in a vacuum. I find that the AngularJS community is an incredible group who are passionate about sharing experiences. As such, a friend  and  AngularJS expert Todd Motto and I have collaborated on many styles and conventions. We agree on most, and some we diverge. I encourage you to check out [Todd's  guidelines](https://github.com/toddmotto/angularjs-styleguide) to get a sense for his approach and how it compares.\r\n\r\nMany of my styles have been from the many pair programming sessions [Ward Bell](http://twitter.com/wardbell) and I have had. While we don't always agree, my friend Ward's has certainly helped influence the ultimate evolution of this guide.\r\n\r\n## Table of Contents\r\n\r\n  1. [Single Responsibility](#single-responsibility)\r\n  1. [IIFE](#iife)\r\n  1. [Modules](#modules)\r\n  1. [Controllers](#controllers)\r\n  1. [Services](#services)\r\n  1. [Factories](#factories)\r\n  1. [Directives](#directives)\r\n  1. [Resolving Promises for a Controller](#resolving-promises-for-a-controller)\r\n  1. [Manual Dependency Injection](#manual-dependency-injection)\r\n  1. [Minification and Annotation](#minification-and-annotation)\r\n  1. [Exception Handling](#exception-handling)\r\n  1. [Naming](#naming)\r\n  1. [Application Structure LIFT Principle](#application-structure-lift-principle)\r\n  1. [Application Structure](#application-structure)\r\n  1. [Modularity](#modularity)\r\n  1. [Angular $ Wrapper Services](#angular-$-wrapper-services)\r\n  1. [Comments](#comments)\r\n  1. [JSHint](#js-hint)\r\n  1. [Constants](#constants)\r\n  1. [Angular Docs](#angular-docs)\r\n  1. [Contributing](#contributing)\r\n  1. [License](#license)\r\n\r\n## Single Responsibility\r\n\r\n  - **Rule of 1**: Define 1 component per file.  \r\n\r\n \tThe following example defines the `app` module and its dependencies, defines a controller, and defines a factory all in the same file.  \r\n\r\n    ```javascript\r\n    /* avoid */\r\n    angular\r\n    \t.module('app', ['ngRoute'])\r\n    \t.controller('SomeController' , SomeController)\r\n    \t.factory('someFactory' , someFactory);\r\n    \t\r\n    function SomeController() { }\r\n\r\n    function someFactory() { }\r\n    ```\r\n    \r\n\tThe same components are now separated into their own files.\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    \r\n    // app.module.js\r\n    angular\r\n    \t.module('app', ['ngRoute']);\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    \r\n    // someController.js\r\n    angular\r\n    \t.module('app')\r\n    \t.controller('SomeController' , SomeController);\r\n\r\n    function SomeController() { }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    \r\n    // someFactory.js\r\n    angular\r\n    \t.module('app')\r\n    \t.factory('someFactory' , someFactory);\r\n    \t\r\n    function someFactory() { }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## IIFE\r\n  - **IIFE**: Wrap AngularJS components in an Immediately Invoked Function Expression (IIFE). \r\n  \r\n  *Why?*: An IIFE removes variables from the global scope. This helps prevent variables and function declarations from living longer than expected in the global scope, which also helps avoid variable collisions.\r\n\r\n  *Why?*: When your code is minified and bundled into a single file for deployment to a production server, you could have collisions of variables and many global variables. An IIFE protects you against both of these by providing variable scope for each file.\r\n  \r\n    ```javascript\r\n    /* recommended */\r\n    // logger.js\r\n    (function () {\r\n      angular\r\n        .module('app')\r\n        .factory('logger', logger);\r\n\r\n      function logger () { }\r\n    })();\r\n\r\n    // storage.js\r\n    (function () {\r\n      angular\r\n        .module('app')\r\n        .factory('storage', storage);\r\n\r\n      function storage () { }\r\n    })();\r\n    ```\r\n\r\n  - Note: For brevity only, the rest of the examples in this guide may omit the IIFE syntax. \r\n\r\n## Modules\r\n\r\n  - **Definitions (aka Setters)**: Declare modules without a variable using the setter syntax. \r\n\r\n\t*Why?*: With 1 component per file, there is rarely a need to introduce a variable for the module.\r\n\t\r\n    ```javascript\r\n    /* avoid */\r\n    var app = angular.module('app', [\r\n        'ngAnimate',\r\n        'ngRoute',\r\n        'app.shared'\r\n        'app.dashboard'\r\n    ]);\r\n    ```\r\n\r\n\tInstead use the simple getter syntax.\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    angular\r\n    \t.module('app', [\r\n        'ngAnimate',\r\n        'ngRoute',\r\n        'app.shared'\r\n        'app.dashboard'\r\n    ]);\r\n    ```\r\n\r\n  - **Getters**: When using a module, avoid using a variables and instead use   chaining with the getter syntax.\r\n\r\n\t*Why?* : This produces more readable code and avoids variables collisions or leaks.\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    var app = angular.module('app');\r\n    app.controller('SomeController' , SomeController);\r\n    \r\n    function SomeController() { }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    angular\r\n      .module('app')\r\n      .controller('SomeController' , SomeController);\r\n    \r\n    function SomeController() { }\r\n    ```\r\n\r\n  - **Setting vs Getting**: Only set once and get for all other instances.\r\n\t\r\n\t*Why?*: A module should only be created once, then retrieved from that point and after.\r\n  \t  \r\n  \t  - Use `angular.module('app', []);` to set a module.\r\n  \t  - Use  `angular.module('app');` to get a module. \r\n\r\n  - **Named vs Anonymous Functions**: Use named functions instead of passing an anonymous function in as a callback. \r\n\r\n\t*Why?*: This produces more readable code, is much easier to debug, and reduces the amount of nested callback code.\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    angular\r\n      .module('app')\r\n      .controller('Dashboard', function () { });\r\n      .factory('logger', function () { });\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n\r\n    // dashboard.js\r\n    angular\r\n      .module('app')\r\n      .controller('Dashboard', Dashboard);\r\n\r\n    function Dashboard () { }\r\n    ```\r\n\r\n    ```javascript\r\n    // logger.js\r\n    angular\r\n      .module('app')\r\n      .factory('logger', logger);\r\n\r\n    function logger () { }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Controllers\r\n\r\n  - **controllerAs View Syntax**: Use the [`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) syntax over the `classic controller with $scope` syntax. \r\n\r\n\t*Why?*: Controllers are constructed, \"newed\" up, and provide a single new instance, and the `controllerAs` syntax is closer to that of a JavaScript constructor than the `classic $scope syntax`. \r\n\r\n\t*Why?*: It promotes the use of binding to a \"dotted\" object in the View (e.g. `customer.name` instead of `name`), which is more contextual, easier to read, and avoids any reference issues that may occur without \"dotting\".\r\n\r\n\t*Why?*: Helps avoid using `$parent` calls in Views with nested controllers.\r\n\r\n    ```html\r\n    <!-- avoid -->\r\n    <div ng-controller=\"Customer\">\r\n      {{ name }}\r\n    </div>\r\n    ```\r\n\r\n    ```html\r\n    <!-- recommended -->\r\n    <div ng-controller=\"Customer as customer\">\r\n      {{ customer.name }}\r\n    </div>\r\n    ```\r\n\r\n  - **controllerAs Controller Syntax**: Use the `controllerAs` syntax over the `classic controller with $scope` syntax. \r\n\r\n  - The `controllerAs` syntax uses `this` inside controllers which gets bound to `$scope`\r\n\r\n\t  *Why?*: `controllerAs` is syntactic sugar over `$scope`. You can still bind to the View and still access `$scope` methods.  \r\n\r\n\t  *Why?*: Helps avoid the temptation of using `$scope` methods inside a controller when it may otherwise be better to avoid them or move them to a factory. Consider using `$scope` in a factory, or if in a controller just when needed. For example when publishing and subscribing events using [`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast), or [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on) consider moving these uses to a factory and invoke form the controller. \r\n\r\n    ```javascript\r\n    /* avoid */\r\n    function Customer ($scope) {\r\n      $scope.name = {};\r\n      $scope.sendMessage = function () { };\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended - but see next section */\r\n    function Customer () {\r\n      this.name = {};\r\n      this.sendMessage = function () { };\r\n    }\r\n    ```\r\n\r\n  - **controllerAs with vm**: Use a capture variable for `this` when using the `controllerAs` syntax. Choose a consistent variable name such as `vm`, which stands for ViewModel.\r\n  \r\n    *Why?*: The `this` keyword is contextual and when used within a function inside a controller may change its context. Capturing the context of `this` avoids encountering this problem.\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    function Customer () {\r\n      this.name = {};\r\n      this.sendMessage = function () { };\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    function Customer () {\r\n      var vm = this;\r\n      vm.name = {};\r\n      vm.sendMessage = function () { };\r\n    }\r\n    ```\r\n\r\n  - Note: You can avoid any [jshint](http://www.jshint.com/) warnings by placing the comment below above the line of code. \r\n    \r\n  ```javascript\r\n  /* jshint validthis: true */\r\n  var vm = this;\r\n  ```\r\n \r\n  - **Bindable Members Up Top**: Place bindable members at the top of the controller, alphabetized, and not spread through the controller code.\r\n  \r\n    *Why?*: Placing bindable members at the top makes it easy to read and helps you instantly identify which members of the controller can be bound and used in the View. \r\n\r\n    *Why?*: Setting anonymous functions inline can be easy, but when those functions are more than 1 line of code they can reduce the readability. Defining the functions below the bindable members (the functions will be hoisted) moves the implementation details down, keeps the bindable members up top, and makes it easier to read. \r\n\r\n    ```javascript\r\n    /* avoid */\r\n    function Sessions() {\r\n        var vm = this;\r\n\r\n        vm.gotoSession = function() {\r\n          /* ... */\r\n        };\r\n        vm.refresh = function() {\r\n          /* ... */\r\n        };\r\n        vm.search = function() {\r\n          /* ... */\r\n        };\r\n        vm.sessions = [];\r\n        vm.title = 'Sessions';\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    function Sessions() {\r\n        var vm = this;\r\n\r\n        vm.gotoSession = gotoSession;\r\n        vm.refresh = refresh;\r\n        vm.search = search;\r\n        vm.sessions = [];\r\n        vm.title = 'Sessions';\r\n\r\n        ////////////\r\n\r\n        function gotoSession() {\r\n          /* */\r\n        }\r\n\r\n        function refresh() {\r\n          /* */\r\n        }\r\n\r\n        function search() {\r\n          /* */\r\n        }\r\n    ```\r\n\r\n  - **Defer Controller Logic**: Defer logic in a controller by delegating to services and factories.\r\n\r\n    *Why?*: Logic may be reused by multiple controllers when placed within a service and exposed via a function.\r\n\r\n    *Why?*: Logic in a service can more easily be isolated in a unit test, while the calling logic in the controller can be easily mocked.\r\n\r\n    *Why?*: Removes dependencies and hides implementations details from the controller.\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    function Order ($http, $q) {\r\n      var vm = this;\r\n      vm.checkCredit = checkCredit;\r\n      vm.total = 0;\r\n\r\n      function checkCredit () { \r\n        var orderTotal = vm.total;\r\n        return $http.get('api/creditcheck').then(function (data) {\r\n            var remaining = data.remaining;\r\n            return $q.when(!!(remaining > orderTotal));\r\n        });\r\n      };\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    function Order (creditService) {\r\n      var vm = this;\r\n      vm.checkCredit = checkCredit;\r\n      vm.total = 0;\r\n\r\n      function checkCredit () { \r\n        return creditService.check();\r\n      };\r\n    }\r\n    ```\r\n\r\n  - **Assigning Controllers**: When a controller must be paired with a view and either component may be re-used by other controllers or views, define controllers along with their routes. \r\n    \r\n    - Note: If a View is loaded via another means besides a route, then use the `ng-controller=\"Avengers as vm\"` syntax. \r\n\r\n    *Why?*: Pairing the controller in the route allows different routes to invoke different pairs of controllers and views. When controllers are assigned in the view using [`ng-controller`](https://docs.angularjs.org/api/ng/directive/ngController), that view is always associated with the same controller.\r\n\r\n   ```javascript\r\n   \r\n    /* avoid - when using with a route and dynamic pairing is desired */\r\n\r\n    // route-config.js\r\n    angular\r\n      .module('app')\r\n      .config(config);\r\n\r\n    function config ($routeProvider) {\r\n      $routeProvider\r\n        .when('/avengers', {\r\n          templateUrl: 'avengers.html'\r\n        });\r\n    }\r\n    ```\r\n\r\n    ```html\r\n    <!-- avengers.html -->\r\n    <div ng-controller=\"Avengers as vm\">\r\n    </div>\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n\r\n    // route-config.js\r\n    angular\r\n      .module('app')\r\n      .config(config);\r\n\r\n    function config ($routeProvider) {\r\n      $routeProvider\r\n        .when('/avengers', {\r\n          templateUrl: 'avengers.html',\r\n          controller: 'Avengers',\r\n          controllerAs: 'vm'\r\n        });\r\n    }\r\n    ```\r\n\r\n    ```html\r\n    <!-- avengers.html -->\r\n    <div>\r\n    </div>\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Services\r\n\r\n  - **Singletons**: Services are instantiated with the `new` keyword, use `this` for public methods and variables. Can also use a factory, which I recommend for consistency. \r\n  \r\n  - Note: [All AngularJS services are singletons](https://docs.angularjs.org/guide/services). This means that there is only one instance of a given service per injector.\r\n\r\n    ```javascript\r\n    // service\r\n\r\n    angular\r\n        .module('app')\r\n        .service('logger', logger);\r\n\r\n    function logger () {\r\n      this.logError = function (msg) {\r\n        /* */\r\n      };\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    // factory\r\n    angular\r\n        .module('app')\r\n        .factory('logger', logger);\r\n\r\n    function logger () {\r\n      return {\r\n        logError: function (msg) {\r\n          /* */\r\n        }\r\n      };\r\n    }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Factories\r\n\r\n  - **Single Responsibility**: Factories should have a [single responsibility](http://en.wikipedia.org/wiki/Single_responsibility_principle), that is encapsulated by its context. Once a factory begins to exceed that singular purpose, a new factory should be created.\r\n\r\n  - **Singletons**: Factories are singletons and return an object that contains the members of the service.\r\n  \r\n  - Note: [All AngularJS services are singletons](https://docs.angularjs.org/guide/services).\r\n\r\n  - **Public Members Up Top**: Expose the callable members of the service (it's interface) at the top, using a technique derived from the [Revealing Module Pattern](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript). \r\n\r\n    *Why?*: Placing the callable members at the top makes it easy to read and helps you instantly identify which members of the service can be called and must be unit tested (and/or mocked). \r\n\r\n    *Why?*: This is especially helpful when the file gets longer as it helps avoid the need to scroll to see what is exposed.\r\n\r\n    *Why?*: Setting functions as you go can be easy, but when those functions are more than 1 line of code they can reduce the readability and cause more scrolling. Defining the callable interface via the returned service moves the implementation details down, keeps the callable interface up top, and makes it easier to read.\r\n\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    function dataService () {\r\n      var someValue = '';\r\n      function save () { \r\n        /* */\r\n      };\r\n      function validate () { \r\n        /* */\r\n      };\r\n\r\n      return {\r\n        save: save,\r\n        someValue: someValue,\r\n        validate: validate\r\n      };\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    function dataService () {\r\n      var someValue = '';\r\n      var service = {\r\n        save: save,\r\n        someValue: someValue,\r\n        validate: validate\r\n      };\r\n      return service;\r\n\r\n      ////////////\r\n      function save () { \r\n        /* */\r\n      };\r\n\r\n      function validate () { \r\n        /* */\r\n      };\r\n    }\r\n    ```\r\n\r\n  - This way bindings are mirrored across the host object, primitive values cannot update alone using the revealing module pattern\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Directives\r\n- **Limit 1 Per File**: Create one directive per file. Name the file for the directive. \r\n\r\n    *Why?*: It is easy to mash all the directives in one file, but difficult to then break those out so some are shared across apps, some across modules, some just for one module. Also easier to maintain.\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    angular\r\n      .module('app.widgets')\r\n\r\n      /* order directive that is specific to the order module */\r\n      .directive('orderCalendarRange', orderCalendarRange)\r\n\r\n      /* sales directive that can be used anywhere across the sales app */\r\n      .directive('salesCustomerInfo', salesCustomerInfo);\r\n\r\n      /* spinner directive that can be used anywhere across apps */\r\n      .directive('sharedSpinner', sharedSpinner);\r\n\r\n      /* implementation details */\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n\r\n    /**\r\n     * @desc order directive that is specific to the order module at a company named Acme\r\n     * @file calendarRange.directive.js\r\n     * @example <div acme-order-calendar-range></div>\r\n     */\r\n    angular\r\n      .module('sales.order')\r\n      .directive('acmeOrderCalendarRange', orderCalendarRange)\r\n\r\n    /**\r\n     * @desc spinner directive that can be used anywhere across the sales app at a company named Acme\r\n     * @file customerInfo.directive.js\r\n     * @example <div acme-sales-customer-info></div>\r\n     */    \r\n    angular\r\n      .module('sales.widgets')\r\n      .directive('acmeSalesCustomerInfo', salesCustomerInfo);\r\n\r\n    /**\r\n     * @desc spinner directive that can be used anywhere across apps at a company named Acme\r\n     * @file spinner.directive.js\r\n     * @example <div acme-shared-spinner></div>\r\n     */\r\n    angular\r\n      .module('shared.widgets')\r\n      .directive('acmeSharedSpinner', sharedSpinner);\r\n\r\n      /* implementation details */\r\n    ```\r\n\r\n    - Note: There are many naming options for directives, especially since they can be used in narrow or wide scopes. Choose one the makes the directive and it's file name distinct and clear. Some examples are below, but see the naming section for more recommendations.\r\n\r\n- **Limit DOM Manipulation**: When manipulating the DOM directly, use a directive. If alternative ways can be used such as using CSS to set styles or the [animation services](https://docs.angularjs.org/api/ngAnimate), Angular templating, [`ngShow`](https://docs.angularjs.org/api/ng/directive/ngShow) or [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide), then use those instead. For example, if the directive simply hide and shows, use ngHide/ngShow, but if the directive does more, combining hide and show inside a directive may improve performance as it reduces watchers. \r\n\r\n    *Why?*: DOM manipulation can be difficult to test, debug, and there are often better ways (e.g. CSS, animations, templating)\r\n\r\n- **Restrict to Elements and Attributes**: When creating a directive that makes sense as a standalone element, allow restrict `E` (custom element) and optionally restrict `A` (custom attribute). Generally, if it could be its own control, `E` is appropriate. General guideline is allow `EA` but lean towards implementing as an element when its standalone and as an attribute when it enhances its existing DOM element.\r\n\r\n    *Why?*: It makes sense.\r\n\r\n    *Why?*: While we can allow the directive to be used as a class, if the directive is truly acting as an element it makes more sense as an element or at least as an attribute.\r\n\r\n    ```html\r\n    <!-- avoid -->\r\n    <div class=\"my-calendar-range\"></div>\r\n    ```\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    angular\r\n        .module('app.widgets')\r\n        .directive('myCalendarRange', myCalendarRange);\r\n\r\n    function myCalendarRange () {\r\n        var directive = {\r\n            link: link,\r\n            templateUrl: '/template/is/located/here.html',\r\n            restrict: 'C'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n          /* */\r\n        }\r\n    }\r\n    ```\r\n\r\n    ```html\r\n    <!-- recommended -->\r\n    <my-calendar-range></my-calendar-range>\r\n    <div my-calendar-range></div>\r\n    ```\r\n    \r\n    ```javascript\r\n    /* recommended */\r\n    angular\r\n        .module('app.widgets')\r\n        .directive('myCalendarRange', myCalendarRange);\r\n\r\n    function myCalendarRange () {\r\n        var directive = {\r\n            link: link,\r\n            templateUrl: '/template/is/located/here.html',\r\n            restrict: 'EA'\r\n        };\r\n        return directive;\r\n\r\n        function link(scope, element, attrs) {\r\n          /* */\r\n        }\r\n    }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Resolving Promises for a Controller\r\n\r\n  - **Controller Activation Promises**: Resolve start-up logic for a controller in an `activate` function.\r\n     \r\n    *Why?*: Placing start-up logic in a consistent place in the controller makes it easier to locate, more consistent to test, and helps avoid spreading out the activation logic across the controller.\r\n\r\n    - Note: If you need to conditionally cancel the route before you start use the controller, use a route resolve instead.\r\n    \r\n    ```javascript\r\n    /* avoid */\r\n    function Avengers(dataservice) {\r\n        var vm = this;\r\n        vm.avengers = [];\r\n        vm.title = 'Avengers';\r\n\r\n        dataservice.getAvengers().then(function(data) {\r\n            vm.avengers = data;\r\n            return vm.avengers;\r\n        });\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    function Avengers(dataservice) {\r\n        var vm = this;\r\n        vm.avengers = [];\r\n        vm.title = 'Avengers';\r\n\r\n        activate();\r\n\r\n        ////////////\r\n\r\n        function activate() {\r\n            return dataservice.getAvengers().then(function(data) {\r\n                vm.avengers = data;\r\n                return vm.avengers;\r\n            });\r\n        }\r\n    }\r\n    ```\r\n\r\n  - **Route Resolve Promises**: When a controller depends on a promise to be resolved, resolve those dependencies in the `$routeProvider` before the controller logic is executed. If you need to conditionally cancel a route before the controller is activated, use a route resolver.\r\n\r\n    *Why?*: A controller may require data before it loads. That data may come from a promise via a custom factory or [$http](https://docs.angularjs.org/api/ng/service/$http). Using a [route resolve](https://docs.angularjs.org/api/ngRoute/provider/$routeProvider) allows the promise to resolve before the controller logic executes, so it might take action based on that data from the promise.\r\n\r\n    ```javascript\r\n    /* avoid */\r\n    angular\r\n      .module('app')\r\n      .controller('Avengers', Avengers);\r\n\r\n    function Avengers (movieService) {\r\n      var vm = this;\r\n      // unresolved\r\n      vm.movies;\r\n      // resolved asynchronously\r\n      movieService.getMovies().then(function (response) {\r\n        vm.movies = response.movies;\r\n      });\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* better */\r\n\r\n    // route-config.js\r\n    angular\r\n      .module('app')\r\n      .config(config);\r\n\r\n    function config ($routeProvider) {\r\n      $routeProvider\r\n        .when('/avengers', {\r\n          templateUrl: 'avengers.html',\r\n          controller: 'Avengers',\r\n          controllerAs: 'vm',\r\n          resolve: {\r\n            moviesPrepService: function (movieService) {\r\n                return movieService.getMovies();\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n    // avengers.js\r\n    angular\r\n      .module('app')\r\n      .controller('Avengers', Avengers);\r\n\r\n    function Avengers (moviesPrepService) {\r\n      var vm = this;\r\n      vm.movies = moviesPrepService.movies;\r\n    }\r\n\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Manual Dependency Injection\r\n\r\n  - **UnSafe from Minification**: Avoid using the shortcut syntax of declaring dependencies without using a minification-safe approach.\r\n  \r\n      *Why?*: The parameters to the component (e.g. controller, factory, etc) will be converted to mangled variables. For example, `common` and `dataservice` may become `a` or `b` and not be found by AngularJS.\r\n\r\n    ```javascript\r\n    /* avoid - not minification-safe*/\r\n    angular\r\n      .module('app')\r\n      .controller('Dashboard', Dashboard);\r\n\r\n    function Dashboard(common, dataservice) {\r\n    }\r\n    ```\r\n\r\n    - This code may produce mangled variables when minified and thus cause runtime errors.\r\n\r\n    ```javascript\r\n    /* avoid - not minification-safe*/\r\n    angular.module('app').controller('Dashboard', d);function d(a, b) { }\r\n    ```\r\n\r\n\r\n  - **Manually Identify Dependencies**: Use $inject to manually identify your dependencies for AngularJS components.\r\n  \r\n      *Why?*: This technique mirrors the technique used by [`ng-annotate`](https://github.com/olov/ng-annotate), which I recommend for automating the creation of minification safe dependencies. If `ng-annotate` detects injection has already been made, it will not duplicate it.\r\n\r\n      *Why?*: This safeguards your dependencies from being vulernable to minification issues when parameters may be mangled. For example, `common` and `dataservice` may become `a` or `b` and not be found by AngularJS.\r\n\r\n      *Why?*: Avoid creating inline dependencies as long lists can be difficult to read in the array. Also it can be confusing that the array is a series of strings while the last item is the component's function. \r\n\r\n    ```javascript\r\n    /* avoid */\r\n    angular\r\n      .module('app')\r\n      .controller('Dashboard', \r\n        ['$location', '$routeParams', 'common', 'dataservice', Dashboard]);\r\n      \r\n    function Dashboard($location, $routeParams, common, dataservice) {\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n    /* recommended */\r\n    angular\r\n      .module('app')\r\n      .controller('Dashboard', Dashboard);\r\n\r\n    Dashboard.$inject = ['$location', '$routeParams', 'common', 'dataservice'];\r\n      \r\n    function Dashboard($location, $routeParams, common, dataservice) {\r\n    }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Minification and Annotation\r\n\r\n  - **ng-annotate**: Use [ng-annotate](//github.com/olov/ng-annotate) for [Gulp](http://gulpjs.com) or [Grunt](http://gruntjs.com) and comment functions that need automated dependency injection using `/** @ngInject */`\r\n  \r\n      *Why?*: This safeguards your code from any dependencies that may not be using minification-safe practices.\r\n\r\n      *Why?*: [`ng-min`](https://github.com/btford/ngmin) is deprecated \r\n\r\n    - The following code is not using minification safe dependencies.\r\n\r\n    ```javascript\r\n    angular\r\n      .module('app')\r\n      .controller('Avengers', Avengers);\r\n\r\n    /* @ngInject */\r\n    function Avengers (storageService, avengerService) {\r\n      var vm = this;\r\n      vm.heroSearch = '';\r\n      vm.storeHero = storeHero;\r\n\r\n      function storeHero(){\r\n        var hero = avengerService.find(vm.heroSearch);\r\n        storageService.save(hero.name, hero);\r\n      }\r\n    }\r\n    ```\r\n\r\n    - When the above code is run through ng-annotate it will produces the following output with the `$inject` annotation and become minification-safe.\r\n\r\n    ```javascript\r\n    angular\r\n      .module('app')\r\n      .controller('Avengers', Avengers);\r\n\r\n    /* @ngInject */\r\n    function Avengers (storageService, avengerService) {\r\n      var vm = this;\r\n      vm.heroSearch = '';\r\n      vm.storeHero = storeHero;\r\n\r\n      function storeHero(){\r\n        var hero = avengerService.find(vm.heroSearch);\r\n        storageService.save(hero.name, hero);\r\n      }\r\n    }\r\n\r\n    Avengers.$inject = ['storageService', 'avengerService'];\r\n\r\n    ```\r\n\r\n    - Note: If `ng-annotate` detects injection has already been made (e.g. `@ngInject` was detected), it will not duplicate the `$inject` code.\r\n\r\n    - Note: Starting from AngularJS 1.3 use the [`ngApp`](https://docs.angularjs.org/api/ng/directive/ngApp) directive's `ngStrictDi` parameter. When present the injector will be created in \"strict-di\" mode causing the application to fail to invoke functions which do not use explicit function annotation (these may not be minification safe). Debugging info will be logged to the console to help track down the offending code.\r\n    `<body ng-app=\"APP\" ng-strict-di>`\r\n\r\n  - **Use Gulp or Grunt for ng-annotate**: Use [gulp-ng-annotate](https://www.npmjs.org/package/gulp-ng-annotate) or [grunt-ng-annotate](https://www.npmjs.org/package/grunt-ng-annotate) in an automated build task. Inject `/* @ngInject */` prior to any function that has dependencies.\r\n  \r\n      *Why?*: ng-annotate will catch most dependencies, but it sometimes requires hints using the `/* @ngInject */` syntax.\r\n\r\n    - The following code is an example of a gulp task using ngAnnotate\r\n\r\n    ```javascript\r\n    gulp.task('js', ['jshint'], function () {\r\n        var source = pkg.paths.js;\r\n        return gulp.src(source)\r\n            .pipe(sourcemaps.init())\r\n            .pipe(concat('all.min.js', {newLine: ';'}))\r\n            // Annotate before uglify so the code get's min'd properly.\r\n            .pipe(ngAnnotate({\r\n                // true helps add where @ngInject is not used. It infers.\r\n                // Doesn't work with resolve, so we must be explicit there\r\n                add: true\r\n            }))\r\n            .pipe(bytediff.start())\r\n            .pipe(uglify({mangle: true}))\r\n            .pipe(bytediff.stop())\r\n            .pipe(sourcemaps.write('./'))\r\n            .pipe(gulp.dest(pkg.paths.dev));\r\n    });\r\n\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Exception Handling\r\n\r\n  - **decorators**: Use a [decorator](https://docs.angularjs.org/api/auto/service/$provide#decorator), at config time using the [`$provide`](https://docs.angularjs.org/api/auto/service/$provide) service, on the [`$exceptionHandler`](https://docs.angularjs.org/api/ng/service/$exceptionHandler) service to perform custom actions when exceptions occur.\r\n  \r\n      *Why?*: Provides a consistent manner in which to customize how exceptions are handled for development-time or run-time.\r\n\r\n  \t```javascript\r\n    angular\r\n        .module('app.exception')\r\n        .config(['$provide', exceptionConfig]);\r\n\r\n    function exceptionConfig($provide) {\r\n        $provide.decorator('$exceptionHandler',\r\n            ['$delegate', '$log', extendExceptionHandler]);\r\n    }\r\n\r\n    function extendExceptionHandler($delegate, $log) {\r\n        return function (exception, cause) {\r\n            $delegate(exception, cause);\r\n            var errorData = {\r\n                exception: exception,\r\n                cause: cause\r\n            };\r\n            var msg = 'ERROR PREFIX' + exception.message;\r\n            $log.error(msg, errorData);\r\n\r\n            // Log during dev with http://toastrjs.com\r\n            // or any other technique you prefer\r\n            toastr.error(msg);\r\n        };\r\n    }\r\n  \t```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Naming\r\nTODO\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Application Structure LIFT Principle\r\n  - **LIFT**: Structure your app such that you can `L`ocate your code quickly, `I`dentify the code at a glance, keep a `F`lattest structure you can, and `T`ry to stay DRY. The structure should follow these 4 basic guidelines. \r\n\r\n      *Why LIFT?*: Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. Another way to check your app structure is to ask yourself: How quickly can you open and work in all of the related files for a feature?\r\n\r\n    When I find my structure is not feeling comfortable, I go back and revisit these LIFT guidelines\r\n  \r\n    1. `L`ocating our code is easy\r\n    2. `I`dentify code at a glance\r\n    3. `F`lat structure as long as we can\r\n    4. `T`ry to stay DRY (Don’t Repeat Yourself) or T-DRY\r\n\r\n  - **Locate**: Make locating your code intuitive, simple and fast.\r\n\r\n      *Why?*: I find this to be super important for a project. If the team cannot find the files they need to work on quickly, that needs to change. You may not know the file name or where its related files are, so putting them in the most intuitive locations and near each other saves a ton of time. A descriptive folder structure can help with this.\r\n\r\n    ```\r\n    /bower_components\r\n    /client\r\n      /app\r\n        /avengers\r\n        /blocks\r\n          /exception\r\n          /logger\r\n        /core\r\n        /dashboard\r\n        /data\r\n        /layout\r\n        /widgets\r\n      /content\r\n      index.html\r\n    .bower.json\r\n    ```\r\n\r\n  - **Identify**: When you look at a file you should instantly know what it contains and represents.\r\n\r\n      *Why?*: You spend less time hunting and pecking for code, and become more efficient. If this means you want longer file names, then so be it. Be descriptive with file names and keeping that contents of the file to exactly 1 thing. Avoid files with multiple controllers, multiple services, or a mixture. There are deviations of the 1 per file rule when I have a set of very small features that are all related to each other, they are still easily identifiable. If not, 1 per file.\r\n\r\n  - **Flat**: Keep a flat folder structure as long as possible. When you get to 7+ files, begin considering separation.\r\n\r\n      *Why?*: Nobody wants to search 7 levels of folders to find a file. Think about menus on web sites … anything deeper than 2 should take serious consideration. In a folder structure there is no hard and fast number rule, but when a folder has 7-10 files, that may be time to create subfolders. Base it on your comfort level. Use a flatter structure until there is an obvious value (to help the rest of LIFT) in creating a new folder.\r\n\r\n  - **T-DRY (Try to Stick to DRY)**: Be DRY, but don't go nuts and sacrfice readability.\r\n\r\n      *Why?*: Being DRY is important, but not crucial if it sacrifices the others in LIFT, which is why I call it T-DRY. I don’t want to type session-view.html for a view because, well, it’s obviously a view. If it is not obvious or by convention, then I name it. \r\n\r\n      *Why?*: Being DRY is important, but not crucial if it sacrifices the others in LIFT, which is why I call it T-DRY. I don’t want to type session-view.html for a view because, well, it’s obviously a view. If it is not obvious or by convention, then I name it.\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Application Structure\r\nTODO\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Modularity\r\nTODO\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Angular $ Wrapper Services\r\n\r\n  - **$document and $window**: Use [`$document`](https://docs.angularjs.org/api/ng/service/$document) and [`$window`](https://docs.angularjs.org/api/ng/service/$window) instead of `document` and `window`.\r\n\r\n    *Why?*: These services are wrapped by Angular and more easily testable than using document and window in tests. This helps you avoid having to mock document and window yourself.\r\n\r\n  - **$timeout and $interval**: Use [`$timeout`](https://docs.angularjs.org/api/ng/service/$timeout) and [`$interval`](https://docs.angularjs.org/api/ng/service/$interval) instead of `setTimeout` and `setInterval` .\r\n\r\n    *Why?*: These services are wrapped by Angular and more easily testable and handle AngularJS's digest cycle thus keeping data binding in sync.\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Comments\r\n\r\n  - **jsDoc**: If planning to produce documentation, use [`jsDoc`](http://usejsdoc.org/) syntax to document function names, description, params and returns\r\n\r\n    *Why?*: You can generate (and regenerate) documentation from your code, instead of writing it from scratch.\r\n\r\n    *Why?*: Provides consistency using a common industry tool.\r\n\r\n    ```javascript\r\n    angular\r\n      .module('app')\r\n      .factory('logger', logger);\r\n\r\n    /**\r\n     * @name logger\r\n     * @desc Application wide logger\r\n     */\r\n    function logger ($log) {\r\n      var service = {\r\n        logError: logError\r\n      };\r\n      return service;\r\n\r\n      ////////////\r\n\r\n      /**\r\n       * @name logError\r\n       * @desc Logs errors\r\n       * @param {String} msg Message to log \r\n       * @returns {String}\r\n       */\r\n      function logError(msg) {\r\n        var loggedMsg = 'Error: ' + msg;\r\n        $log.error(loggedMsg);\r\n        return loggedMsg;\r\n      };\r\n    }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## JS Hint\r\n\r\n  - **Use an Options File**: Use JS Hint for linting your JavaScript and be sure to customize the JS Hint options file and include in source control. See the [JS Hint docs](http://www.jshint.com/docs/) for details on the options.\r\n\r\n    *Why?*: Provides a first alert prior to committing any code to source control.\r\n\r\n    *Why?*: Provides consistency across your team.\r\n\r\n    ```javascript\r\n    {\r\n        \"bitwise\": true,\r\n        \"camelcase\": true,\r\n        \"curly\": true,\r\n        \"eqeqeq\": true,\r\n        \"es3\": false,\r\n        \"forin\": true,\r\n        \"freeze\": true,\r\n        \"immed\": true,\r\n        \"indent\": 4,\r\n        \"latedef\": \"nofunc\",\r\n        \"newcap\": true,\r\n        \"noarg\": true,\r\n        \"noempty\": true,\r\n        \"nonbsp\": true,\r\n        \"nonew\": true,\r\n        \"plusplus\": false,\r\n        \"quotmark\": \"single\",\r\n        \"undef\": true,\r\n        \"unused\": false,\r\n        \"strict\": false,\r\n        \"maxparams\": 10,\r\n        \"maxdepth\": 5,\r\n        \"maxstatements\": 40,\r\n        \"maxcomplexity\": 8,\r\n        \"maxlen\": 120,\r\n\r\n        \"asi\": false,\r\n        \"boss\": false,\r\n        \"debug\": false,\r\n        \"eqnull\": true,\r\n        \"esnext\": false,\r\n        \"evil\": false,\r\n        \"expr\": false,\r\n        \"funcscope\": false,\r\n        \"globalstrict\": false,\r\n        \"iterator\": false,\r\n        \"lastsemic\": false,\r\n        \"laxbreak\": false,\r\n        \"laxcomma\": false,\r\n        \"loopfunc\": true,\r\n        \"maxerr\": false,\r\n        \"moz\": false,\r\n        \"multistr\": false,\r\n        \"notypeof\": false,\r\n        \"proto\": false,\r\n        \"scripturl\": false,\r\n        \"shadow\": false,\r\n        \"sub\": true,\r\n        \"supernew\": false,\r\n        \"validthis\": false,\r\n        \"noyield\": false,\r\n\r\n        \"browser\": true,\r\n        \"node\": true,\r\n\r\n        \"globals\": {\r\n            \"angular\": false,\r\n            \"$\": false\r\n        }\r\n    }\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## Constants\r\n\r\n  - **Vendor Globals**: Create an AngularJS Constant for vendor libraries' global variables.\r\n\r\n    *Why?*: Provides a way to inject vendor libraries that otherwise are globals. This improves code testability by allowing you to more easily know what the dependencies of your components are (avoids leaky abstractions). It also allows you to mock these dependencies, where it makes sense.\r\n\r\n    ```javascript\r\n    // constants.js\r\n\r\n    /* global toastr:false, moment:false */\r\n    (function () {\r\n        'use strict';\r\n\r\n        angular\r\n            .module('app.core')\r\n            .constant('toastr', toastr)\r\n            .constant('moment', moment);\r\n    })();\r\n    ```\r\n\r\n**[Back to top](#table-of-contents)**\r\n\r\n## AngularJS docs\r\nFor anything else, API reference, check the [Angular documentation](//docs.angularjs.org/api).\r\n\r\n## Contributing\r\n\r\nOpen an issue first to discuss potential changes/additions. If you have questions with the guide, feel free to leave them as issues in the repo. If you find a typo, create a pull request. The idea is to keep the content up to date and use github’s native feature to help tell the story with issues and PR’s, which are all searchable via google. Why? Because odds are if you have a question, someone else does too! You can learn more here at about how to contribute.\r\n\r\n*By contributing to this repo you are agreeing to make your content available subject to the license of this repo.*\r\n\r\n\r\n  - **Process**\r\n    1. Discuss the changes in an Issue. \r\n    1. Open a Pull Request, reference the issue, and explain the change and why it adds value.\r\n    1. The Pull Request will be evaluated and either merged or declined.\r\n\r\n## License\r\n\r\n#### (The MIT License)\r\n\r\nCopyright (c) 2014 [John Papa](http://johnpapa.net)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n**[Back to top](#table-of-contents)**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}